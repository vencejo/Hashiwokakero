#BlueJ class context
comment0.target=Hashi()
comment0.text=\nConstructor\ de\ la\ clase\n\n
comment1.params=listaInicial
comment1.target=Hashi(ArrayList<Isla>)
comment1.text=\nConstructor\ de\ la\ clase\ con\ parametros\n\n
comment10.params=islaA\ islaB
comment10.target=boolean\ sePuedeTender(Isla,\ Isla)
comment10.text=\nDadas\ dos\ islas\ me\ dice\ si\ se\ puede\ tender\ un\ puente\ entre\ ellas\ sin\ que\ cruce\ a\ una\ isla\ \nu\ otro\ puente\ entre\ ambas\n\n
comment11.params=islaA\ islaB
comment11.target=boolean\ seHaTendido(Isla,\ Isla)
comment11.text=\nDadas\ dos\ islas\ me\ dice\ si\ existe\ un\ puente\ entre\ ambas\n\n
comment12.params=isla
comment12.target=ArrayList<Isla>\ islasVecinas(Isla)
comment12.text=\nIslasVecinas\ me\ devuelve\ una\ lista\ con\ las\ islas\ vecinas\ a\ la\ isla\ considerada,\ con\ las\ que\ se\ esta\ en\ \ncondiciones\ de\ tender\ algun\ puente\n\n
comment13.params=isla
comment13.target=ArrayList<Isla>\ conectadas(Isla)
comment13.text=\nMe\ devuelve\ una\ lista\ con\ las\ islas\ que\ estan\ conectadas\ ,\ tienen\ puentes\ tendidos\ ,\ a\ una\ isla\ dada\n\n
comment14.target=boolean\ conexo()
comment14.text=\nDevuelve\ verdadero\ si\ las\ TODAS\ las\ islas\ y\ los\ puentes\ del\ hashi\ forman\ un\ conjunto\ conexo.\npara\ ello\ uso\ un\ recorrido\ en\ anchura\ basado\ en\ la\ estructura\ de\ datos\ de\ la\ cola\n\n
comment15.params=isla
comment15.target=ArrayList<Isla>\ potencialmenteConectadas(Isla)
comment15.text=\nMe\ devuelve\ una\ lista\ con\ las\ islas\ que\ PUEDEN\ estar\ conectadas\ en\ un\ futuro\ ,\ a\ una\ isla\ dada.\nSi\ la\ isla\ no\ esta\ en\ la\ listaDeIslas\ me\ devuelve\ null\ ya\ que\ no\ puede\ tender\ ningun\ puente\ \npotencial\ al\ haberlos\ tendido\ ya\ todos\ los\ que\ podia\n\n
comment16.target=boolean\ potencialmenteConexo()
comment16.text=\nUn\ hashi\ es\ potencialmenteConexo\ cuando\ las\ islas\ que\ ya\ no\ estan\ en\ la\ lista\ de\ islas\ (las\ islas\ "Agotadas"\ que\ han\ tendido\ todos\nsus\ puentes)\ PUEDEN\ SER\ \ conectadas\ mediante\ alg\u00FAn\ camino\ a\ alguna\ isla\ que\ a\u00FAn\ est\u00E1\ en\ la\ lista\ de\ Islas.\nDe\ no\ ser\ as\u00ED\ se\ estarian\ formando\ regiones\ inconexas,\ incompatibles\ con\ la\ solucion\ correcta\ del\ problema.\nUtilizo\ un\ recorrido\ en\ anchura\ basado\ en\ la\ estructura\ de\ datos\ de\ \ cola\ para\ implementar\ este\ metodo.\n\n
comment17.params=isla
comment17.target=int\ numeroVecinas(Isla)
comment17.text=\nMe\ da\ el\ numero\ de\ vecinas\ de\ una\ isla\n\n
comment18.params=isla
comment18.target=int\ puentesPosibles(Isla)
comment18.text=\nPuentes\ posibles\ me\ devuelve\ el\ numero\ de\ puentes\ que\ aun\ se\ pueden\ tender\ desde\ una\ isla\ a\ sus\ vecinos\n\n
comment19.params=islaA\ islaB
comment19.target=void\ tenderPuente(Isla,\ Isla)
comment19.text=\nToma\ dos\ islas\ de\ la\ lista\ de\ islas\ ,\ las\ enlaza\ \ disminuyendo\ \nen\ uno\ el\ valor\ guardado\ en\ A\ y\ en\ B\ ,\ crea\ un\ puente\ entre\ ambas\ y\ lo\ mete\ en\ el\ conjunto\ de\ \nlos\ puentes,\ y\ quita\ a\ una\ o\ ambas\ islas\ de\ la\ lista\ de\ las\ islas\ por\ enlazar\ si\ sus\ valores\ \nllegan\ a\ cero\n\n
comment2.params=listaDeIslas\ listaCandidatas\ conjuntoDePuentesVerticales\ conjuntoDePuentesHorizontales
comment2.target=Hashi(ArrayList<Isla>,\ ArrayList<Isla>,\ HashSet<Puente>,\ HashSet<Puente>)
comment2.text=\nConstructor\ de\ la\ clase\ con\ todos\ los\ parametros\n\n
comment20.params=isla
comment20.target=void\ actualizarListaDeIslas(Isla)
comment20.text=\nActualizo\ la\ situacion\ de\ las\ islas\ en\ la\ lista,\ si,\ tras\ tender\ el\ puente,\nel\ valor\ de\ estas\ ha\ llegado\ a\ 0\ ,\ tengo\ que\ quitarlas\ de\ la\ lista\ ,\ ademas\ si\ su\nvalor\ es\ distinto\ de\ 0\ tengo\ que\ volver\ a\ hacerla\ isla\ candidata\n\n
comment21.target=void\ recolocaCandidatas()
comment21.text=\nHEURISTICA\ para\ evitar\ la\ rapida\ formacion\ de\ puentes\ dobles\:\nvoy\ revisando\ la\ lista\ de\ las\ candidatas\ y\ si\ alguna\ de\ estas\ islas\ \nsolo\ puede\ tender\ puentes\ dobles\ (tiene\ ya\ puentes\ con\ todas\nsus\ vecinas\ )\ la\ pongo\ al\ final\ de\ la\ lista\ de\ candidatas\n\n
comment22.params=puente
comment22.target=ArrayList<Isla>\ islasAdyacentesAlPuente(Puente)
comment22.text=\nDevuelve\ la\ lista\ de\ islas\ adyacentes\ a\ un\ puente\n\n
comment23.params=isla
comment23.target=boolean\ islaAfortunada(Isla)
comment23.text=\nEntiendo\ por\ "Isla\ Afortuanada"\ a\ aquella\ a\ la\ que\ le\ es\ indiferente\ la\ direccion\ que\ tome\ su\ \nproximo\ puente.\ \nEsta\ rodeada\ por\ una\ serie\ de\ vecinas\ y\ \ a\ todas\ \ tiene\ que\ tender\ al\ menos\ \ \nun\ puente.\nEste\ es\ un\ metodo\ heuristico\ que\ devuelve\ verdadero\ si\ la\ isla\ es\ afortunada\ y\ esta\ forzada\ a\ tender\ una\ serie\nde\ puentes.\ P.ej.\ una\ isla\ de\ valor\ 8\ no\ tiene\ eleccion\ sobre\ los\ puentes\ a\ tender,\ igual\ que\nuna\ isla\ de\ valor\ 4\ en\ una\ esquina\ ,\ una\ de\ valor\ 6\ en\ la\ pared\ etc...\n\n
comment24.params=isla
comment24.target=boolean\ islaSemiAfortunada(Isla)
comment24.text=\nEntiendo\ por\ "Isla\ semi\ Afortuanada"\ a\ aquella\ a\ la\ que\ le\ es\ indiferente\ la\ direcciones\ que\ tomen\ sus\ \npuentes,\ menos\ el\ \u00FAltimo\ ,\ que\ queda\ indefinido.\nSe\ da\ en\ el\ caso\ de\ islas\ con\ valor\ impar\nP.ej.\ una\ isla\ de\ valor\ 3\ rodeada\ por\ dos\ vecinas,\ una\ de\ valor\ 5\ rodeada\ por\ 3\ vecinas\ y\ una\ de\ valor\n7\ rodeada\ por\ 4\ vecinas\n\n
comment25.target=boolean\ parcialmenteValido()
comment25.text=\nUn\ Hashi\ sera\ parcialmente\ valido\ cuando\:\n\nEl\ valor\ de\ una\ isla\ (el\ num\ de\ puentes\ a\ tender\ a\ partir\ de\ una\ isla)\ sea\ menor\ o\ igual\ \nal\ num\ de\ puentes\ posibles\ con\ sus\ vecinas\ a\ partir\ de\ esa\ isla\ en\ el\ momento\ actual.\n\nCon\ esto\ evito\ situaciones\ del\ tipo\ \:\ (2)--(2)\ y\ (1)--(3)--(1)\ p.ej.\ donde\ el\ n\u00FAmero\ de\ puentes\ \ \nque\ se\ pueden\ tender\ es\ menor\ al\ necesario\ para\ dejar\ a\ cero\ los\ valores\ de\ las\ islas.\n\n\n
comment26.target=boolean\ cumpleCondicionesDePoda()
comment26.text=\nCONDICIONES\ DE\ PODA\nEl\ metodo\ me\ dara\ verdadero\ si\ el\ ensayo\ hashi\nal\ que\ se\ lo\ paso\ cumple\ las\ condiciones\ de\ poda\n\n
comment27.params=isla
comment27.target=boolean\ vecinaUnitaria(Isla)
comment27.text=\nDevuelve\ verdadero\ si\ la\ isla\ tiene\ una\ vecina\ de\ valor\ 1\n\n
comment28.params=isla
comment28.target=int\ obtenerValorEnLista(Isla)
comment28.text=\nObtiene\ el\ valor\ de\ una\ isla\ de\ coordenadas\ determinadas\ en\ la\ lista\ de\ islas\n\n
comment29.params=isla
comment29.target=void\ disminuyeValorEnLista(Isla)
comment29.text=\nDisminuye\ en\ uno\ el\ \ valor\ de\ una\ isla\ de\ coordenadas\ determinadas\ en\ la\ lista\ de\ islas\n\n
comment3.target=ArrayList<Isla>\ obtenerListaDeIslas()
comment3.text=\nEstractor\ de\ la\ lista\ de\ islas\n\n
comment30.params=islaBuscada
comment30.target=Isla\ buscaIsla(Isla)
comment30.text=\nDada\ una\ isla,\ busca\ a\ su\ homologa\ en\ \ la\ lista\ del\ hashi\n\n
comment31.params=myEntSal\ nodo
comment31.target=void\ imprimirHashi(EntSal,\ int)
comment31.text=\nImprime\ una\ posible\ solucion,\ (puede\ que\ sea\ parcial)\n\n
comment32.params=myEntSal\ rutaEntradaDatos
comment32.target=void\ imprimirSolucion(EntSal,\ String)
comment32.text=\nImprime\ la\ solucion\ final\n\n
comment33.target=boolean\ solucion()
comment33.text=\nDevuelve\ verdadero\ si\ el\ Hashi\ representa\ una\ solucion\ valida\ para\ el\ tablero\ inicial\n\n
comment4.target=ArrayList<Isla>\ obtenerListaCandidatas()
comment4.text=\nEstractor\ de\ las\ candidatas\n\n
comment5.target=HashSet<Puente>\ obtenerPuentesVerticales()
comment5.text=\nEstractor\ de\ campos\ de\ la\ clase\ \:\ devuelve\ los\ puentes\ verticales\ del\ Hashi\n\n
comment6.target=HashSet<Puente>\ obtenerPuentesHorizontales()
comment6.text=\nEstractor\ de\ campos\ de\ la\ clase\:\ devuelve\ los\ puentes\ horizontales\ del\ Hashi\n\n
comment7.target=Hashi\ clonar()
comment7.text=\nClonador\ de\ Hashis\n\n
comment8.params=listaOriginal
comment8.target=ArrayList<Isla>\ clonarLista(ArrayList<Isla>)
comment8.text=\nClonador\ de\ lista\ de\ Islas\n\n
comment9.params=conjuntoOriginal
comment9.target=HashSet<Puente>\ clonarConjuntoPuentes(HashSet<Puente>)
comment9.text=\nClonador\ de\ Conjunto\ de\ puentes\ Verticales\n\n
numComments=34
